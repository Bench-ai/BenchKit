import argparse
from BenchKit.Data.Helpers import create_dataset_zips, test_dataloading, run_upload
from Datasets.ProjectDatasets import main
from BenchKit.Miscellaneous.User import delete_all_images
from BenchKit.Miscellaneous.Dockerize import build_docker_image, save_image_tarball, upload_tarball
from colorama import Fore, Style


def create_datasets():
    return main()


def reset_docker_code():
    delete_all_images()


def cli():
    parser = argparse.ArgumentParser()

    parser.add_argument("action",
                        nargs='?',
                        choices=["migrate-data", "reset", "migrate-code"])

    parser.add_argument("input_value",
                        nargs='?',
                        default=None)

    parser.add_argument("--fp",
                        type=str,
                        help="Path to Dockerfile",
                        required=False)

    parser.add_argument("--im",
                        type=str,
                        help="name of the image you wish to use",
                        required=False)

    parser.add_argument("--dv",
                        type=int,
                        help="the version of the image you wish to use",
                        required=False)

    parser.add_argument("--t",
                        type=str,
                        help="the tag to be used on this image",
                        required=False)

    parser.add_argument("--rd",
                        help="reset dataset",
                        action="store_true",
                        required=False)

    parser.add_argument("--rc",
                        help="reset docker_code",
                        action="store_true",
                        required=False)

    parser.add_argument("--zip",
                        help="create zip files",
                        action="store_true",
                        required=False)

    parser.add_argument("--tdl",
                        help="test data loader",
                        action="store_true",
                        required=False)

    parser.add_argument("--up",
                        help="upload dataset",
                        action="store_true",
                        required=False)

    args = parser.parse_args()

    if args.action == "migrate-data":

        arg_list = []

        if args.input_value is not None:
            for list_arg in create_datasets():
                if list_arg[2] == args.input_value:
                    arg_list = [list_arg]
            if not arg_list:
                raise ValueError(f"No such dataset named {args.input_value}")
        else:
            arg_list = create_datasets()

        for input_args in arg_list:

            p_ds, c_ds, name, arg_list, kwarg_dict = input_args

            argument_list = [args.zip, args.tdl, args.up]

            if argument_list == ([False] * len(argument_list)):
                args.zip, args.tdl, args.up = True, True, True

            if args.zip:
                create_dataset_zips(p_ds, name)

            if args.tdl:
                test_dataloading(name, c_ds, *arg_list, **kwarg_dict)

            if args.up:
                run_upload(name)

    elif args.action == "migrate-code":

        print(Fore.RED + "Building Image" + Style.RESET_ALL)
        tarball, image = build_docker_image(version=args.input_value)
        print(Fore.GREEN + "built image" + Style.RESET_ALL)

        print(Fore.RED + "Creating Tarball" + Style.RESET_ALL)
        save_image_tarball(tarball,
                           image)
        print(Fore.GREEN + "Completed Tarball creation" + Style.RESET_ALL)

        print(Fore.RED + "Starting Image Upload " + Style.RESET_ALL)
        upload_tarball(tarball, version=args.input_value)
        print(Fore.GREEN + "Completed Image Upload" + Style.RESET_ALL)


if __name__ == '__main__':
    cli()